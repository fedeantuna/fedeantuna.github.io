{"pageProps":{"article":{"id":"set-up-net-development-environment-on-fedora-34","contentHtml":"<p><a href=\"https://fedoramagazine.org/set-up-a-net-development-environment/\">Read this article on Fedora Magazine</a></p>\n<p>Since the release of .NET Core, .NET developers are able to develop applications for and in GNU/Linux using languages like C#. If you are a .NET developer wanting to use Fedora Linux as your main workstation, this article is for you. Iâ€™ll demonstrate how to set up a full development environment for .NET on Fedora Linux, including an IDE/Text Editor, <em>Azure Functions</em> and an SSL certificate for a secure <em>https</em> site. There are multiple options for Text Editor and IDE, but here we cover <em>Visual Studio Code</em> and <em>Rider</em>. The last one is not free but it is a great option for those familiar with <em>Visual Studio</em> on <em>Windows</em>.</p>\n<h2>Install .NET SDK</h2>\n<p>Until recently the <em>Microsoft</em> repositories were required in the list of sources to be able to install dotnet through <em>dnf</em>. But that is no longer the case. Fedora has added the dotnet packages to their repositories, so installation is quite simple. Use the following two commands to install the latest <em>dotnet</em> (.NET 5 at the moment) and the previous (.NET Core 3.1), if you want it.</p>\n<pre><code>sudo dnf install dotnet\nsudo dnf install dotnet-sdk-3.1\n</code></pre>\n<p>That's it! Easier than ever!</p>\n<h2>Install NodeJS</h2>\n<p>If you want to develop <em>Azure Functions</em> or use <em>Azurite</em> to emulate storage, you will need to have NodeJS installed. The best way to do this is to first install <em>nvm</em> to allow installation of <em>NodeJS</em> in user space. This means you may then install global packages without ever using <em>sudo</em>.</p>\n<p>To install <em>nvm</em>, follow <a href=\"https://github.com/nvm-sh/nvm#install--update-script\">these instructions</a> in order to have the latest version. As of today the latest version is 0.38. Check the github site in the instructions for the latest version.</p>\n<pre><code>sudo dnf install curl\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash\n</code></pre>\n<p>Once you have <em>nvm</em> installed, just run <em>nvm install lts/*</em> to install the latest LTS version of <em>node</em> or check <a href=\"https://github.com/nvm-sh/nvm#usage\">here</a> for more options.</p>\n<h2>Install a .NET IDE</h2>\n<h3>Visual Studio Code</h3>\n<p>Check <a href=\"https://code.visualstudio.com/docs/setup/linux#_rhel-fedora-and-centos-based-distributions\">this guide</a> in case something's changed, but as of today the process to install <em>Visual Studio Code</em> is to import <em>Microsoft</em> key, add the repository, and install the corresponding package.</p>\n<pre><code>sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\nsudo sh -c 'echo -e \"[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/vscode.repo'\nsudo dnf check-update\nsudo dnf install code\n</code></pre>\n<p>Now install the C# extension from <em>Microsoft</em>.</p>\n<p><img src=\"/images/csharp-extension.png\" alt=\"c# extension\"></p>\n<p>That's pretty much it.</p>\n<h3>JetBrains Rider</h3>\n<h4>JetBrains Toolbox</h4>\n<p>If you come from <em>Visual Studio</em> on <em>Windows</em>, this tool will feel more familiar to you. It's not free, but you have 30 days to try it out and see if you like it or not before buying a license. You can check <a href=\"https://www.jetbrains.com/rider/buy/#personal?billing=yearly\">here</a> for more information.</p>\n<p>There are several ways to install <em>Rider</em>, but the easiest and cleanest way to do it, it's to install the <em>JetBrains Toolbox</em> and let it manage the installation for you. To install it, navigate to <a href=\"https://www.jetbrains.com/toolbox-app/\">this link</a> and click on the <em>Download</em> button. Make sure that the <em>.tar.gz</em> option is selected.</p>\n<p>If you feel more comfortable using the UI, then go to the directory where you downloaded the file using the file explorer of your Desktop Environment (<em>nautilus</em>, <em>dolphin</em>, etc.), right click on it and extract its content. Then go inside the extracted directory, right click on the <em>jetbrains-toolbox</em> file and click on <em>Properties</em>. Make sure that the <em>Allow executing file as program</em> checkbox under the <em>Permissions</em> tab is checked and close the <em>Properties</em> window. Now double click the jetbrains-toolbox file.</p>\n<p>If you have troubles following that in your DE or if you prefer using the console, open a terminal and navigate to the directory where you downloaded the file. Then extract the content of the file, navigate into the extracted directory, add execution permissions to the AppImage and execute it. The version numbers that I am using might differ from yours, so autocomplete with the <em>TAB</em> key instead of using copy-and-paste to avoid errors.</p>\n<pre><code>tar -xzvf jetbrains-toolbox-1.20.8352.tar.gz\ncd jetbrains-toolbox-1.20.8352\nchmod +x jetbrains-toolbox\n./jetbrains-toolbox\n</code></pre>\n<p>It takes a few seconds or minutes, depending on your system and internet connection, until a small Toolbox window opens. After that you can delete the downloaded files. You will be able to open the JetBrains Toolbox from your app menu, the AppImage installs the application under <em>~/.local/share/JetBrains</em>.</p>\n<img src=\"/images/jetbrains-toolbox.png\" alt=\"jetbrains toolbox\" width=\"300\" />\n<h4>Rider</h4>\n<p>In the <em>JetBrains Toolbox</em>, search for the <em>Rider</em> app and click Install. If you want to change where it's going to be installed and other options, check first the settings (top right corner).</p>\n<p>When the installation finishes, open <em>Rider</em>. The first screen you'll see is to opt-in in sending anonymous statistics to the <em>JetBrains</em> team. You can choose whatever you prefer there. The second one is to import your settings. If you've never used <em>Rider</em> before, click on <em>Do not import settings</em> and <em>OK</em>. After that, you'll be prompted to choose a theme and keymap. Choose whatever feels more comfortable. Click next on every other screen until you reach the <em>License</em> window. If you have already bought a license, complete your JB Account or corresponding information. If you want to use the trial period, switch to <em>Evaluate for free</em> and click on <em>Evaluate</em>. Do the same for <em>dotCover</em> and <em>dotTrace</em> on the <em>Plugins</em> section on the left panel. Then click <em>Continue</em>.</p>\n<p>That's it! We now have Rider installed. You can change the options selected going to <em>Configure -> Settings</em> on the initial screen or <em>File -> Settings</em> on the editor.</p>\n<h2>Azure Functions and Azurite</h2>\n<p>To be able to develop Azure Functions we need to install the <em>azurite</em> node package. The <em>azurite</em> package allows you to emulate storage which is needed for some types of Azure Functions.</p>\n<pre><code>npm install -g azurite\n</code></pre>\n<p>You can read more about Azurite and how to use it <a href=\"https://github.com/Azure/Azurite\">here</a>.</p>\n<h3>Visual Studio Code</h3>\n<p>To develop Azure Functions with <em>VSCode</em>, we need to also install the <em>azure-functions-core-tools</em> package. As of today, the latest version is v3. Check <a href=\"https://github.com/Azure/azure-functions-core-tools\">here</a> to find the latest version and more information on how to use the tool. Run <em>npm i -g azure-functions-core-tools@3 --unsafe-perm true</em> if you want to install v3 or <em>npm i -g azure-functions-core-tools@2 --unsafe-perm true</em> if you want to install v2.</p>\n<p>Then we just need to install the <em>Azure Functions</em> extension from <em>Microsoft</em>. Once the extension is installed, you can go to the <em>Azure</em> icon on the left panel and create a new Azure Function from the templates.</p>\n<h3>JetBrains Rider</h3>\n<p>On <em>Rider</em>, we first need to install the <em>Azure Toolkit for Rider</em> plugin. Once the plugin is installed, restart the IDE. Then go to <em>Settings -> Tools -> Azure -> Functions</em>. If you want to manage the <em>azure-functions-core-tools</em> by yourself manually, install the package like described in the <em>Visual Studio Code</em> section and then specify the <em>Azure Functions Core Tools Path</em> by hand. Otherwise, if you want <em>Rider</em> to handle updates and the package automatically, click on <em>Download latest version...</em> and make sure that the option <em>Check updates for Azure Function Core tools on startup</em> is checked.</p>\n<p>Then navigate to <em>Tools -> Azure -> Azurite</em> and on the <em>Azurite package path</em> dropdown, select your installation of Azurite. It should look something like <em>~/.nvm/versions/node/v14.16.1/lib/node_modules/azurite</em>.</p>\n<p>Click <em>Save</em> and now you are ready to create Azure Functions. If you click <em>New Solution</em> you should see the Azure Functions templates on the menu.</p>\n<h2>Create a SSL Certificate for your .NET apps</h2>\n<p>You won't be able to trust the .NET certificate generated by <em>dotnet dev-certs https --trust</em>. That command has no effect for us on Fedora Linux.</p>\n<p>This article doesn't cover the details for <em>easy-rsa</em> or the concepts for the SSL Certificate. If you are interested into learning more about this, please check these sources:</p>\n<ul>\n<li><a href=\"https://www.ssl.com/faqs/faq-what-is-ssl/\">SSL</a></li>\n<li><a href=\"https://www.ssl.com/faqs/what-is-a-certificate-authority/\">CA</a></li>\n<li><a href=\"https://www.ssl.com/how-to/create-a-pfx-p12-certificate-file-using-openssl/\">pfx</a></li>\n<li><a href=\"https://github.com/OpenVPN/easy-rsa\">easy-rsa</a></li>\n</ul>\n<p>First, install the <em>easy-rsa</em> tool. Then create your own certificate authority (CA), set your system to trust it, sign your certificate and set .NET to use the certificate.</p>\n<p>Start with the package install and set up the working directory.</p>\n<pre><code>sudo dnf install easy-rsa\ncd ~\nmkdir .easyrsa\nchmod 700 .easyrsa\ncd .easyrsa\ncp -r /usr/share/easy-rsa/3/* ./\n./easyrsa init-pki\n</code></pre>\n<p>Now create a file called <em>vars</em> with the CA details. If you know what you are doing, feel free to change these values.</p>\n<pre><code>cat &#x3C;&#x3C; EOF > vars\nset_var EASYRSA_REQ_COUNTRY    \"US\"\nset_var EASYRSA_REQ_PROVINCE   \"Texas\"\nset_var EASYRSA_REQ_CITY       \"Houston\"\nset_var EASYRSA_REQ_ORG        \"Development\"\nset_var EASYRSA_REQ_EMAIL      \"local@localhost.localdomain\"\nset_var EASYRSA_REQ_OU         \"LocalDevelopment\"\nset_var EASYRSA_ALGO           \"ec\"\nset_var EASYRSA_DIGEST         \"sha512\"\nEOF\n</code></pre>\n<p>Now , build the CA and trust it. When you run the first command it will prompt for the CA name, you can just press enter to leave the default value.</p>\n<pre><code>./easyrsa build-ca nopass\nsudo cp ./pki/ca.crt /etc/pki/ca-trust/source/anchors/easyrsaca.crt\nsudo update-ca-trust\n</code></pre>\n<p>Next, create the request for our CA and sign it. After executing the last command, type <em>yes</em> and press enter.</p>\n<pre><code>mkdir req\ncd req\nopenssl genrsa -out localhost.key\nopenssl req -new -key localhost.key -out localhost.req -subj /C=US/ST=Texas/L=Houston/O=Development/OU=LocalDevelopment/CN=localhost\ncd ..\n./easyrsa import-req ./req/localhost.req localhost\n./easyrsa sign-req server localhost\n</code></pre>\n<p>Now, place all the files needed inside a common directory and create the <em>pfx</em> cert. After the final command you will be prompted for a password. Type anything you want. Be sure to remember your password and keep it secret.</p>\n<pre><code>cd ~\nmkdir .certs\ncp .easyrsa/pki/issued/localhost.crt .certs/localhost.crt\ncp .easyrsa/req/localhost.key .certs/localhost.key\ncd .certs\nopenssl pkcs12 -export -out localhost.pfx -inkey localhost.key -in localhost.crt\n</code></pre>\n<p>Finally, edit the <em>~/.bashrc</em> file and add the following environment variables.</p>\n<pre><code>cat &#x3C;&#x3C; EOF >> .bashrc\n# .NET\nexport ASPNETCORE_Kestrel__Certificates__Default__Password=\"PASSWORD\"\nexport ASPNETCORE_Kestrel__Certificates__Default__Path=\"/home/YOUR_USERNAME/.certs/localhost.pfx\"\nEOF\n</code></pre>\n<p>Remember to replace <em>PASSWORD</em> for your actual password and <em>YOUR_USERNAME</em> for your actual username.</p>\n<p>Reboot your system (there are other ways to do this, but rebooting is the easiest and fastest one). And that's it! You can now develop using .NET with <em>https</em> on your Fedora Linux system!</p>\n","title":"Set up .NET Development Environment on Fedora 34","date":"2021-05-19"}},"__N_SSG":true}